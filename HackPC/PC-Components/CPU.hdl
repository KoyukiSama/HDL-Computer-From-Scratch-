// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


        Mux16(a=instruction , b=ALUout , sel=instruction[15] , out=Ain ); // Alu or instruction -> A register
        Not(in=instruction[15], out=NotInstruction15);
        And(a=instruction[15], b=instruction[5], out=Instruction15AndDestA);
        Or(a=NotInstruction15, b=Instruction15AndDestA, out=Acontrol);
        ARegister(in=Ain , load=Acontrol , out=Aout, out[0..14]=addressM ); // load A register
        
        And(a=instruction[15] , b=instruction[12] , out=ALUyControl );
        Mux16(a=Aout , b=inM , sel=ALUyControl , out=ALUy ); // A register or inM -> ALU
        And(a=instruction[15], b=instruction[4], out=Dcontrol);
        DRegister(in=ALUout , load=Dcontrol , out=ALUx ); // D register -> ALU
        And(a=instruction[15] , b=instruction[3] , out=writeM ); // write M control

        ALU(x=ALUx , y=ALUy , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUout, out=outM , zr=zr , ng=ng ); // ALU logic
        

        // load = 1 , inc = 0
        DMux8Way(in=true , sel=instruction[0..2] , a=NULL , b=JGT , c=JEQ , d=JGE , e=JLT , f=JNE , g=JLE , h=JMP );
        // Compute basic flags
        Not(in=zr, out=Notzr);
        Not(in=ng, out=Notng);
        // Jump conditions
        And(a=JGT, b=Notzr, out=JGTAndNotzr);
        And(a=JGTAndNotzr, b=Notng, out=JGTout); // JGTout
        And(a=JEQ, b=zr, out=JEQout); // JEQout
        And(a=JGE, b=Notng, out=JGEout); // JGEout
        And(a=JLT, b=ng, out=JLTout); // JLTout
        And(a=JNE, b=Notzr, out=JNEout); // JNEout
        Or(a=zr, b=ng, out=ZrOrNg);
        And(a=JLE, b=ZrOrNg, out=JLEout); //JLEout
        And(a=JMP, b=true, out=JMPout); // JMPout

        Or8Way(in[0]=false , in[1]=JGTout , in[2]=JEQout , in[3]=JGEout , in[4]=JLTout , in[5]=JNEout , in[6]=JLEout , in[7]=JMPout , out=preLoadC ); // or the output
        And(a=preLoadC, b=instruction[15], out=loadC);

        Not(in=loadC, out=notLoadC);
        Not(in=reset , out=notReset );
        And(a=notLoadC, b=notReset, out=incC);
        
        PC(in=Aout , load=loadC , inc=incC , reset=reset , out[0..14]=pc );
        
}